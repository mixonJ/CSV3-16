using System.Collections.Generic;
using System.Text;
using mcTransmitter;
using OracleFirewall.DTOs;
using HostForTransmitter.Code;

namespace OracleFirewall.Interfaces {
    public interface IOracleController {
        void Dispose();
        int DeleteItems(List<DeletedItem> deleteItems, ref StringBuilder sb, ref ResultDto dto);
        void ProcessCompanies(List<Company> list, ref StringBuilder sb, ref ResultDto dto);
        void ProcessCompanyBidStatuses(List<CompanyBidStatus> list, ref StringBuilder sb, ref ResultDto dto);
        void ProcessCompanyOrderStatuses(List<CompanyOrderStatus> list, ref StringBuilder sb, ref ResultDto dto);
        void ProcessCompanyProjectProductStatuses(List<CompanyProjectProductStatus> list, ref StringBuilder sb, ref ResultDto dto);
        void ProcessCompanyProjectStatuses(List<CompanyProjectStatus> list, ref StringBuilder sb, ref ResultDto dto);
        void ProcessCompanyQuoteStatuses(List<CompanyQuoteStatus> list, ref StringBuilder sb, ref ResultDto dto);
        void ProcessCompanyUsers(List<CompanyUser> list, ref StringBuilder sb, ref ResultDto dto);
        void ProcessCompetitorPlants(List<CompetitorPlant> list, ref StringBuilder sb, ref ResultDto dto);
        void ProcessCompetitors(List<Competitor> list, ref StringBuilder sb, ref ResultDto dto);
        void ProcessContactNotes(List<ContactNote> list, ref StringBuilder sb, ref ResultDto dto);
        void ProcessContacts(List<Contact> list, ref StringBuilder sb, ref ResultDto dto);
        void ProcessCreditStatuses(List<CreditStatus> list, ref StringBuilder sb, ref ResultDto dto);
        void ProcessCustomerEvents(List<CustomerEvent> list, ref StringBuilder sb, ref ResultDto dto);
        void ProcessCustomerEventTypes(List<CustomerEventType> list, ref StringBuilder sb, ref ResultDto dto);
        void ProcessCustomerTypes(List<CustomerType> list, ref StringBuilder sb, ref ResultDto dto);
        void ProcessDeviationTypes(List<DeviationType> list, ref StringBuilder sb, ref ResultDto dto);
        void ProcessDivisions(List<Division> list, ref StringBuilder sb, ref ResultDto dto);
        void ProcessEventFrequency(List<EventFrequency> list, ref StringBuilder sb, ref ResultDto dto);
        void ProcessEventStatus(List<EventStatu> list, ref StringBuilder sb, ref ResultDto dto);
        void ProcessLinesOfBusiness(List<LinesOfBusiness> list, ref StringBuilder sb, ref ResultDto dto);
        void ProcessLogins(List<Login> list, ref StringBuilder sb, ref ResultDto dto);
        void ProcessLostReasons(List<LostReason> list, ref StringBuilder sb, ref ResultDto dto);
        void ProcessManagersSalesmen(List<ManagersSalesman> list, ref StringBuilder sb, ref ResultDto dto);
        void ProcessOrderDetails(List<OrderDetail> list, ref StringBuilder sb, ref ResultDto dto);
        void ProcessOrders(List<Order> list, ref StringBuilder sb, ref ResultDto dto);
        void ProcessPaymentTerms(List<PaymentTerm> list, ref StringBuilder sb, ref ResultDto dto);
        void ProcessPlantLinesOfBusiness(List<PlantLinesOfBusiness> list, ref StringBuilder sb, ref ResultDto dto);
        void ProcessPlantProductPrices(List<PlantProductPrice> list, ref StringBuilder sb, ref ResultDto dto);
        void ProcessPlants(List<Plant> list, ref StringBuilder sb, ref ResultDto dto);
        void ProcessProductLines(List<ProductLine> list, ref StringBuilder sb, ref ResultDto dto);
        void ProcessProducts(List<Product> list, ref StringBuilder sb, ref ResultDto dto);
        void ProcessProductTemplates(List<ProductTemplate> list, ref StringBuilder sb, ref ResultDto dto);
        void ProcessProductTypes(List<ProductType> list, ref StringBuilder sb, ref ResultDto dto);
        void ProcessProductUsages(List<ProductUsage> list, ref StringBuilder sb, ref ResultDto dto);
        void ProcessProjectBidderCharges(List<ProjectBidderCharge> list, ref StringBuilder sb, ref ResultDto dto);
        void ProcessProjectBidderNotes(List<ProjectBidderNote> list, ref StringBuilder sb, ref ResultDto dto);
        void ProcessProjectBidderProducts(List<ProjectBidderProduct> list, ref StringBuilder sb, ref ResultDto dto);
        void ProcessProjectBidders(List<ProjectBidder> list, ref StringBuilder sb, ref ResultDto dto);
        void ProcessProjectBidderStatuses(List<ProjectBidderStatus> list, ref StringBuilder sb, ref ResultDto dto);
        void ProcessProjectCharges(List<ProjectCharge> list, ref StringBuilder sb, ref ResultDto dto);
        void ProcessProjectChargeTypes(List<ProjectChargeType> list, ref StringBuilder sb, ref ResultDto dto);
        void ProcessProjectDistances(List<ProjectDistance> list, ref StringBuilder sb, ref ResultDto dto);
        void ProcessProjectMapQtyRanges(List<ProjectMapQtyRanx> list, ref StringBuilder sb, ref ResultDto dto);
        void ProcessProjectNotes(List<ProjectNote> list, ref StringBuilder sb, ref ResultDto dto);
        void ProcessProjectProducts(List<ProjectProduct> list, ref StringBuilder sb, ref ResultDto dto);
        void ProcessProjects(List<Project> list, ref StringBuilder sb, ref ResultDto dto);
        void ProcessProjectTypes(List<ProjectType> list, ref StringBuilder sb, ref ResultDto dto);
        void ProcessProspectNotes(List<ProspectNote> list, ref StringBuilder sb, ref ResultDto dto);
        void ProcessProspects(List<Prospect> list, ref StringBuilder sb, ref ResultDto dto);
        void ProcessQuoteDetails(List<QuoteDetail> list, ref StringBuilder sb, ref ResultDto dto);
        void ProcessQuotes(List<Quote> list, ref StringBuilder sb, ref ResultDto dto);
        void ProcessQuoteSections(List<QuoteSection> list, ref StringBuilder sb, ref ResultDto dto);
        void ProcessQuoteStandardClauses(List<QuoteStandardClaus> list, ref StringBuilder sb, ref ResultDto dto);
        void ProcessQuoteStatuses(List<QuoteStatus> list, ref StringBuilder sb, ref ResultDto dto);
        void ProcessQuoteSurcharges(List<QuoteSurcharge> list, ref StringBuilder sb, ref ResultDto dto);
        void ProcessQuoteTypes(List<QuoteType> list, ref StringBuilder sb, ref ResultDto dto);
        void ProcessRoles(List<Role> list, ref StringBuilder sb, ref ResultDto dto);
        void ProcessSalespersonContacts(List<SalespersonContact> list, ref StringBuilder sb, ref ResultDto dto);
        void ProcessSalesPersonRegions(List<SalesPersonRegion> list, ref StringBuilder sb, ref ResultDto dto);
        void ProcessScheduleItems(List<ScheduleItem> list, ref StringBuilder sb, ref ResultDto dto);
        void ProcessSchedules(List<Schedule> list, ref StringBuilder sb, ref ResultDto dto);
        void ProcessSources(List<Source> list, ref StringBuilder sb, ref ResultDto dto);
        void ProcessSourceSystems(List<SourceSystem> list, ref StringBuilder sb, ref ResultDto dto);
        void ProcessStandardClauses(List<StandardClaus> list, ref StringBuilder sb, ref ResultDto dto);
        void ProcessStatuses(List<Status> list, ref StringBuilder sb, ref ResultDto dto);
        void ProcessSurcharges(List<Surcharge> list, ref StringBuilder sb, ref ResultDto dto);
        void ProcessTemplatedProducts(List<TemplatedProduct> list, ref StringBuilder sb, ref ResultDto dto);
        void ProcessTerms_Discount(List<Terms_Discount> list, ref StringBuilder sb, ref ResultDto dto);
        void ProcessUnit_Of_Measure(List<Unit_Of_Measure> list, ref StringBuilder sb, ref ResultDto dto);
        void ProcessUserRoles(List<UserRole> list, ref StringBuilder sb, ref ResultDto dto);
        void ProcessUsers(List<User> list, ref StringBuilder sb, ref ResultDto dto);
        void ProcessVehicleTypes(List<VehicleType> list, ref StringBuilder sb, ref ResultDto dto);
        void ProcessZoneCodes(List<ZoneCode> list, ref StringBuilder sb, ref ResultDto dto);
        string ReturnSomethingFromDB();
    }
}